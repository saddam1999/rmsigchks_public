#!/usr/bin/python
import sys
import dfu2 as dfu
import usbexec
import struct

if __name__ == '__main__': 
	print "*** based on akayn's securerom patch ***"
	device = dfu.acquire_device()
	serial_number = device.serial_number
	dfu.release_device(device)
	print 'Device: ' + serial_number
	if 'CPID:8015' not in serial_number:
		print 'ERROR: This device is not supported.'
		print 'Supported devices are iPhone 8, iPhone 8 Plus and iPhone X.'
		sys.exit()
	if 'PWND:[' not in serial_number:
		print 'ERROR: The device must be in pwned DFU Mode before applying patches, so please enable pwned DFU Mode first.'
		sys.exit()
	if 'PWND:[checkm8]' not in serial_number:
		print 'ERROR: Only devices PWND with checkm8 are supported.'
		sys.exit()

	try:
		device = usbexec.PwnedUSBDevice()
	except:
		print "ERROR: Failed to apply patches."
		print 'This usually means patches have already been applied before.'
		sys.exit()
	try:
		device.write_memory(0x1801E8000 + 0x5000        , struct.pack('<8Q', 0, 0, 0, 0x1800086A0, 2, 132, 128, 0))
		device.write_memory(0x1801E8000 + 0x5000 +  0x80, struct.pack('<8Q', 0, 0, 0, 0x1800086A0, 2,   8, 128, 0))
		device.write_memory(0x1801E8000 + 0x5000 + 0x100, struct.pack('<8Q', 0, 0, 0, 0x1800086A0, 2,   8, 128, 0))
		device.write_memory(0x1801E8000 + 0x5000 + 0x180, struct.pack('<8Q', 0, 0, 0, 0x1800086A0, 2,   8, 128, 0))
		device.execute(0, 0x10000D4EC, 0x1801E8000 + 0x5000        )
		device.execute(0, 0x10000D4EC, 0x1801E8000 + 0x5000 +  0x80)
		device.execute(0, 0x10000D4EC, 0x1801E8000 + 0x5000 + 0x100)
		device.execute(0, 0x10000D4EC, 0x1801E8000 + 0x5000 + 0x180)
		device.execute(0, 0x10000DB98)
		try:
			with open('0x8015.bin','rb') as f:
				data = f.read()
		except IOError:
			print "ERROR: Couldn't find 0x8015.bin. Exiting."
			sys.exit()
		device.write_memory(0x180018000 + 0x400, data)
		device.execute(0, 0x180018400)
	except:
		print 'ERROR: Unknown error during applying patches.'
		sys.exit()
	print 'securerom patched.'
	print '* You can now upload unsigned images to device.'
	print '* and debug the next boot stages.'
